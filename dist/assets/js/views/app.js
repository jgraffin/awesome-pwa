!function(){"use strict";var e={isLoading:!0,visibleCards:{},selectedCities:[],spinner:document.querySelector(".loader"),cardTemplate:document.querySelector(".cardTemplate"),container:document.querySelector(".main"),addDialog:document.querySelector(".dialog-container"),daysOfWeek:["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]};document.getElementById("butRefresh").addEventListener("click",function(){e.updateForecasts()}),document.getElementById("butAdd").addEventListener("click",function(){e.toggleAddDialog(!0)}),document.getElementById("butAddCity").addEventListener("click",function(){var t=document.getElementById("selectCityToAdd"),a=t.options[t.selectedIndex],c=a.value,r=a.textContent;e.selectedCities||(e.selectedCities=[]),e.getForecast(c,r),e.selectedCities.push({key:c,label:r}),e.saveSelectedCities(),e.toggleAddDialog(!1)}),document.getElementById("butAddCancel").addEventListener("click",function(){e.toggleAddDialog(!1)}),e.toggleAddDialog=function(t){t?e.addDialog.classList.add("dialog-container--visible"):e.addDialog.classList.remove("dialog-container--visible")},e.updateForecastCard=function(t){var a=new Date(t.created),c=t.channel.astronomy.sunrise,r=t.channel.astronomy.sunset,n=t.channel.item.condition,s=t.channel.atmosphere.humidity,o=t.channel.wind,i=e.visibleCards[t.key];i||(i=e.cardTemplate.cloneNode(!0),i.classList.remove("cardTemplate"),i.querySelector(".location").textContent=t.label,i.removeAttribute("hidden"),e.container.appendChild(i),e.visibleCards[t.key]=i);var d=i.querySelector(".card-last-updated"),l=d.textContent;if(!(l&&(l=new Date(l),a.getTime()<l.getTime()))){d.textContent=t.created,i.querySelector(".description").textContent=n.text,i.querySelector(".date").textContent=n.date,i.querySelector(".current .icon").classList.add(e.getIconClass(n.code)),i.querySelector(".current .temperature .value").textContent=Math.round(n.temp),i.querySelector(".current .sunrise").textContent=c,i.querySelector(".current .sunset").textContent=r,i.querySelector(".current .humidity").textContent=Math.round(s)+"%",i.querySelector(".current .wind .value").textContent=Math.round(o.speed),i.querySelector(".current .wind .direction").textContent=o.direction;var u=i.querySelectorAll(".future .oneday"),y=new Date;y=y.getDay();for(var h=0;h<7;h++){var g=u[h],m=t.channel.item.forecast[h];m&&g&&(g.querySelector(".date").textContent=e.daysOfWeek[(h+y)%7],g.querySelector(".icon").classList.add(e.getIconClass(m.code)),g.querySelector(".temp-high .value").textContent=Math.round(m.high),g.querySelector(".temp-low .value").textContent=Math.round(m.low))}e.isLoading&&(e.spinner.setAttribute("hidden",!0),e.container.removeAttribute("hidden"),e.isLoading=!1)}},e.getForecast=function(a,c){var r="select * from weather.forecast where woeid="+a,n="https://query.yahooapis.com/v1/public/yql?format=json&q="+r;"caches"in window&&caches.match(n).then(function(t){t&&t.json().then(function(t){var r=t.query.results;r.key=a,r.label=c,r.created=t.query.created,e.updateForecastCard(r)})});var s=new XMLHttpRequest;s.onreadystatechange=function(){if(s.readyState===XMLHttpRequest.DONE){if(200===s.status){var r=JSON.parse(s.response),n=r.query.results;n.key=a,n.label=c,n.created=r.query.created,e.updateForecastCard(n)}}else e.updateForecastCard(t)},s.open("GET",n),s.send()},e.updateForecasts=function(){var t=Object.keys(e.visibleCards);t.forEach(function(t){e.getForecast(t)})},e.saveSelectedCities=function(){var t=JSON.stringify(e.selectedCities);localStorage.selectedCities=t},e.getIconClass=function(e){switch(e=parseInt(e)){case 25:case 32:case 33:case 34:case 36:case 3200:return"clear-day";case 0:case 1:case 2:case 6:case 8:case 9:case 10:case 11:case 12:case 17:case 35:case 40:return"rain";case 3:case 4:case 37:case 38:case 39:case 45:case 47:return"thunderstorms";case 5:case 7:case 13:case 14:case 16:case 18:case 41:case 42:case 43:case 46:return"snow";case 15:case 19:case 20:case 21:case 22:return"fog";case 24:case 23:return"windy";case 26:case 27:case 28:case 31:return"cloudy";case 29:case 30:case 44:return"partly-cloudy-day"}};var t={key:"2459115",label:"New York, NY",created:"2016-07-22T01:00:00Z",channel:{astronomy:{sunrise:"5:43 am",sunset:"8:21 pm"},item:{condition:{text:"Windy",date:"Thu, 21 Jul 2016 09:00 PM EDT",temp:56,code:24},forecast:[{code:44,high:86,low:70},{code:44,high:94,low:73},{code:4,high:95,low:78},{code:24,high:75,low:89},{code:24,high:89,low:77},{code:44,high:92,low:79},{code:44,high:89,low:77}]},atmosphere:{humidity:56},wind:{speed:25,direction:195}}};e.selectedCities=localStorage.selectedCities,e.selectedCities?(e.selectedCities=JSON.parse(e.selectedCities),e.selectedCities.forEach(function(t){e.getForecast(t.key,t.label)})):(e.updateForecastCard(t),e.selectedCities=[{key:t.key,label:t.label}],e.saveSelectedCities()),"serviceWorker"in navigator&&navigator.serviceWorker.register("./service-worker.js").then(function(){console.log("Service Worker Registered")})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
